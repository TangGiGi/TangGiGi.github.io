{"pages":[],"posts":[{"title":"Android案例-弹出菜单","text":"MainActivity.java123456789public void OnMenu(View view){ // 获取自定义的菜单布局文件 View popupWindow_view = getLayoutInflater().inflate(R.layout.menu, null,false); // 创建PopupWindow实例,设置菜单宽度和高度为包裹其自身内容 popupWindow = new PopupWindow(popupWindow_view, ActionBar.LayoutParams.WRAP_CONTENT, ActionBar.LayoutParams.WRAP_CONTENT, true); //设置菜单显示在按钮的下面 popupWindow.showAsDropDown(findViewById(R.id.btn_menu),0,0); // 点击其他地方消失 menu.xml为弹出菜单 文档 public class PopupWindow extends Objectjava.lang.Object ↳ android.widget.PopupWindow 该类表示可用于显示任意视图的弹出窗口。弹出窗口是出现在当前活动顶部的浮动容器。This class represents a popup window that can be used to display an arbitrary view. The popup window is a floating container that appears on top of the current activity. Public constructors1234public PopupWindow (View contentView, int width, int height, boolean focusable) Create a new popup window which can display the contentView. The dimension of the window must be passed to this constructor.The popup does not provide any background. This should be handled by the content view. contentView:the popup’s contentwidth :the popup’s widthheight :the popup’s heightfocusable :true if the popup can be focused, false otherwise Public methods1234public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Parametersanchor:the view on which to pin the popup windowxoff:A horizontal offset from the anchor in pixelsyoff:A vertical offset from the anchor in pixelsgravity: Alignment of the popup relative to the anchor 12345678View inflate(int resource, ViewGroup root)//Inflate a new view hierarchy from the specified xml resource.View inflate(XmlPullParser parser, ViewGroup root)//Inflate a new view hierarchy from the specified xml node.View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)//Inflate a new view hierarchy from the specified XML node.View inflate(int resource, ViewGroup root, boolean attachToRoot)//Inflate a new view hierarchy from the specified xml resource.","link":"/2018/11/04/Android/Android案例-弹出菜单/"},{"title":"MMX课内实验","text":"实验内容使用普通和 MMX 技术实现淡入淡出效果，比较其时间花费。 简介1996 年，Intel 开始将 MMX 技术引入 Pentium 产品系列，MMX 十一组用于多媒体人物的优化指令，共有 57 条新指令。这些新指令以一种 SIMD(single-instruction-multiple-data,但指令多数据)方式来处理数据。于是，它能一次在多个数据元素上同时完成加、乘这样的运算。一般，每条指令执行只用一个时钟周期。对于何时的应用，与不适用 MMX 指令相比，这些快速地并行操作能产生 2-8 倍的加速效果。随着 x86 体系结构推出 64 位的处理器，Intel 也扩展了这些指令，使它们能处理双 quadword(128 位)操作数和浮点运算。在 MMX 指令中，引入了饱和(saturation)算术。在通常的无符号算术中，在运算出现上溢时(最高位向上进位)，则此额外位会被舍掉。这被称为环绕(wraparound)运算，因为从结果上看，舍掉进位使两个数加法之和小于被加的两个数。在饱和算术中，如果加法导致上溢，减法导致下溢，那么结果分别被设置成可表示的最大值和最小值。下载地址:https://www.libsdl.org/download-2.0.php 实验环境实验所使用的软件为 Visual Studio 2017 和 SDL 2.0SDL（Simple DirectMedia Layer）是一套开放源代码的跨平台多媒体开发库，使用 C 语言写成。SDL 提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（Linux、Windows、Mac OS X 等）的应用软件。目前SDL 多用于开发游戏、模拟器、媒体播放器等多媒体应用领域。SDL 使用 GNU 宽通用公共许可证为授权方式，意指动态链接（dynamic link 其库并不需要开放本身的源代码。 实验过程 打开Visual Studio，创建一个新的空白C++工程。 右键项目名-&gt;属性菜单-&gt;C/C++-&gt;常规-&gt;附加包含目录-&gt;选择SDL/include 文件夹 属性菜单-&gt;C/C++-&gt;代码生成-&gt;运行库-&gt;改为”多线程 DLL (/MD)” 属性菜单-&gt;Linker-&gt;常规-&gt;附加库目录-&gt;选择SDL/lib/X86 属性菜单-&gt;Linker-&gt;输入-&gt;附加依赖项-&gt;填入SDL2.lib; SDL2main.lib; 属性菜单-&gt;Linker-&gt;系统-&gt;子系统-&gt;改为未设置 如果出现找不到SDL2.lib的错误,可以尝试把SDL2.lib复制到项目的可执行文件的同一级目录下 SDL 准备工作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const int SCREEN_WIDTH = 1920;const int SCREEN_HEIGHT = 1080;unsigned int len = SCREEN_WIDTH * SCREEN_HEIGHT * 4;unsigned int T = 2000;unsigned char* tar, *pic1, *pic2;SDL_Window *gWindow = nullptr;SDL_Surface *gScreenSurface = nullptr, *gpic1 = nullptr, *gpic2 = nullptr;//开始测试之前的准备工作void before() {//初始化SDL视频子系统if (SDL_Init(SDL_INIT_VIDEO) &lt; 0){ printf(\"Window could not be created! SDL_Error: %s\\n\", SDL_GetError()); while (1);}//创建窗口gWindow = SDL_CreateWindow(\"SHOW BMP\",//窗口标题 SDL_WINDOWPOS_CENTERED,//窗口位置设置 SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH,//窗口的宽度 SCREEN_HEIGHT,//窗口的高度 SDL_WINDOW_SHOWN//显示窗口);if (gWindow == nullptr){ printf(\"Window could not be created! SDL_Error: %s\\n\", SDL_GetError()); while (1);}//将gWindow和gScreenSurface链接gScreenSurface = SDL_GetWindowSurface(gWindow);//找到输出图像所在的位置tar = (unsigned char*)(gScreenSurface-&gt;pixels);//获取图像文件的数据大小len = gScreenSurface-&gt;h * gScreenSurface-&gt;pitch;}void after() {SDL_FreeSurface(gpic1);//释放空间SDL_FreeSurface(gpic2);gpic1 = nullptr;gpic2 = nullptr;SDL_DestroyWindow(gWindow);//销毁窗口gWindow = nullptr;SDL_Quit();//退出SDL} 普通方法123456789101112void brute_force() {int time_st = SDL_GetTicks(), cnt = 0;while (SDL_GetTicks() - time_st &lt; T) {double shade = (double)(SDL_GetTicks() - time_st) / T; //获取当前渐变进度for (unsigned int i = 0; i &lt; len; i++) { tar[i] = pic1[i] + (pic2[i] - pic1[i]) * shade;}++cnt;SDL_UpdateWindowSurface(gWindow); //完成计算后刷新图像}printf(\"FPS = %d\\n\", cnt * 1000/ T);} MMX方法1234567891011121314151617181920212223242526272829303132333435363738394041424344void mmx() {int time_st = SDL_GetTicks();int cnt = 0;while (SDL_GetTicks() - time_st &lt; T) { uint16_t ff2 = (SDL_GetTicks() - time_st) * 256 / T; uint16_t ff1 = 256 - ff2; //将4个16位整数拼在一起，当读取的时候会被当做一个64位整数进行处理 uint16_t f2[4] = { ff2,ff2,ff2,ff2 }; uint16_t f1[4] = { ff1,ff1,ff1,ff1 }; uint32_t p1, p2, *ptar; //4位的并行处理，因此循环次数位原先的四分之一 for (unsigned int i = 0; i &lt; len / 4; i++) { p1 = ((uint32_t*)pic1)[i]; p2 = ((uint32_t*)pic2)[i]; ptar = &amp;(((uint32_t*)tar)[i]); __asm {//将所需数据移入寄存器movd mm0, [p1] //load 4 pixel components from image A 把低 32位赋值给mm0movd mm1, [p2] //load 4 pixel components from image Bmov edi, ptar pxor mm7, mm7 //zero out mm7//load fade value replicated 4 timesmovq mm3, [f1] //f1的64位赋值给mm3movq mm4, [f2] //将mm0和mm1解开，构成 00XX 00XX 00XX 00XX形式punpcklbw mm0, mm7punpcklbw mm1, mm7pmullw mm1, mm4pmullw mm0, mm3//将结果相加后右移8位，再从拆开后的形式转回paddw mm0, mm1psrlw mm0, 8 //XXYY XXYY XXYY XXYY =&gt; 00XX 00XX 00XX 00XXpackuswb mm0, mm7 //00XX 00XX 00XX 00XX =&gt; XX XX XX XX//将结果传回目标位置movd[edi], mm0 } } cnt++; SDL_UpdateWindowSurface(gWindow);}printf(\"FPS = %d\\n\", cnt * 1000 / T);} 主函数1234567891011121314151617181920212223242526272829303132#include \"SDL.h\"#include &lt;iostream&gt;#include &lt;cstdio&gt;//未设置时需要这一行//系统改为 window子系统时需要注释掉#undef mainint main(int argc, char** argv) { before(); //加载图片并获取地址 gpic1 = SDL_ConvertSurface(SDL_LoadBMP(\"C:\\\\Users\\\\xiaoxin\\\\Desktop\\\\5.bmp\"), gScreenSurface-&gt;format, 0); gpic2 = SDL_ConvertSurface(SDL_LoadBMP(\"C:\\\\Users\\\\xiaoxin\\\\Desktop\\\\6.bmp\"), gScreenSurface-&gt;format, 0); pic1 = (unsigned char*)(gpic1-&gt;pixels); pic2 = (unsigned char*)(gpic2-&gt;pixels); //surface的快速复制 SDL_BlitSurface(gpic1, nullptr, gScreenSurface, nullptr); SDL_UpdateWindowSurface(gWindow);//更新显示 SDL_Delay(1000); SDL_BlitSurface(gpic2, nullptr, gScreenSurface, nullptr); SDL_UpdateWindowSurface(gWindow);//更新显示 SDL_Delay(1000); brute_force(); mmx(); SDL_Delay(15000); after(); return 0;} 运行结果 图片1 渐变 渐变 图片2 FPS 比较","link":"/2018/12/15/Computer Organization & Architecture/MMX/"},{"title":"Linux网络服务-Internet服务","text":"Content Xinetd Ftp Http SSH Xinetd (Extended Internet Daemon) 守护进程Daemon 运行在后台的一种特殊程序，独立于控制终端执行某种任务或者等待处理某些发生的事件，如smbd，named等 Linux的大多数服务是用守护程序实现的，守护程序打开一个端口并且监听该端口，等待客户机的连接。一旦客户机提交了连接请求，守护程序就创建一个子进程来响应，而父进程继续监听更多的服务请求。因此每个守护程序可以处理多个客户服务的请求。 服务器上的许多服务都是通过超级守护程序包 inetd 或 xinetd 来管理和启动的。 超级守护程序充当一组服务发出连接请求时的中介者。它直接接受连接请求、启动所需的服务并将请求传递到新启动的服务器。如果客户机和服务器之间的连接终止，则由 xinetd 启动的服务器将从内存中删除。 通过 inetd 启动服务既有优点也有缺点。最大的优点就是节省资源（尤其是内存），因为服务器仅在需要时才启动。但是，缺点是在装载、启动和连接所需服务时将发生延迟。 守护程序的运行方式 独立运行的守护程序 由init脚本管理 其脚本存放在/etc/rc.d/init.d/目录下 由Xinetd运行的守护程序 由xinetd管理启动 服务的配置文件存放在/etc/xinetd.d/目录下 可用pstree查看当前进程树 Xinetd特点 强大的访问控制功能：提供对用户的审查和权限控制、限制连接数目、设定特定的连接时间 强大的日志功能：可以为每一个服务设置日志等级：为每个服务设置日志文件；记录起止时间；记录非法访问请求 专项功能：可以将客户端的请求交到另外的主机去处理 与客户端的交互功能 配置Xinetd 配置文件 /etc/xinetd.conf123456默认配置参数 defaults 为所有的服务指定缺省值 { key operator parameter parameter. . . instances ＝ 60 } includedir /etc/xinetd.d //指明配置文件目录将提示 xinetd 解释目录/etc/xinetd.d/ 中的所有文件以配置服务 配置其网络服务 123456 service service_name { key operator parameter parameter. . . }运算符有 =、-= 和 += 可在目录 /etc/xinetd.d/ 中为每个服务创建一个单独的配置文件 例子 1234567service telnet{ socket_type = stream wait = no user = root server = /usr/sbin/in.telnetd disable = no}","link":"/2018/12/07/Linux/Class Notes/Linux 网络服务- Internet服务/"},{"title":"Linux用户用户组和文件权限","text":"","link":"/2018/12/07/Linux/Class Notes/Linux用户用户组和文件权限/"},{"title":"Linux网络服务","text":"Content NTP(network time protocol) Linux打印服务 NTP ntp通过与时间服务器同步使本机时间与UTC(世界协调时间）同步 UTC也称为GMT（格林尼治时间） 本地时间 /etc/sysconfig/clock ZONE UTC Linux 系统中有 2 个主要的时钟： 硬件时钟。这是一个独立于 CPU 中运行的所有控制程序而运行的时钟。也称为时间时钟、RTC、BIOS 时钟或 CMOS 时钟。 系统时间。这是 Linux 内核内部时钟的时间，并且由计时器中断驱动。 当 Linux 第一次启动时，系统时间与硬件时钟同步。之后， Linux 只使用系统时间。 date xntp 通过提供以下服务解决同步问题： xntp 定期根据收集到的更正数据更正本地计算机时钟。 xntp 会随时借助网络中的时间服务器更正本地时间。 xntp 支持对本地参考时钟（如无线电控制的时钟）进行管理。 Linux打印服务 CUPS (Common Unix Printing System ) 是行式打印机守护程序Line Print Daemon (LPD)的后继，在redhat中仍使用部分LPD命令进行打印机调整与监视。 LPD （行式打印机守护程序） 在发送实际打印数据之前，将先发送一些与作业相关的数据，例如打印机队列。LPD 服务的端口号是 515 IPP （因特网打印协议） 是一个基于HTTP 协议的相对较新的（自 1999）协议。使用 IPP，所传送的与作业有关的数据比其他协议要多得多。CUPS 使用 IPP 进行内部数据传送。这是在 CUPS 服务器之间转发队列的首选协议。IPP 的端口号是 631 SMB （服务讯息块）。CUPS 还支持在连接到 Windows 共享的打印机上进行打印，SMB 使用端口号 137、138 和 139","link":"/2018/12/07/Linux/Class Notes/Linux网络服务/"},{"title":"Vi常见命令","text":"","link":"/2018/12/07/Linux/Class Notes/Vi常见命令/"},{"title":"Linux简介","text":"manman （/usr/share/man）如果输入命令 man 后英语手册页没有自动显示，则您可以使用参数LANG=en_EN来显示英语版本的手册页。1&gt; LANG=en_EN man man 给出关于man的具体描述，包括以下几个部分其中每个手册页标题的左右侧是命令名和手册页所属的章节号。标题的中间是章节的名称。 12345678910NAME 命令的名称和简短描述SYNOPSIS 语法的描述DESCRIPTION 命令的详细描述OPTIONS 提供的所有可用选项的描述COMMANDS 在程序运行时可以分配给该程序的说明FILES 使用某种方法连接到命令的文件SEE ALSO 相关命令的提示DIAGNOSTICS 程序可能出现的错误消息EXAMPLE 调用命令的示例BUGS 命令的已知错误和问题 手册页可以分为以下不同的小节 123456781 可执行程序和 shell 命令（用户命令）2 系统调用3 功能和库例程4 设备文件5 配置文件和文件格式6 游戏7 宏软件包和文件格式8 系统管理命令 例如12&gt;man 1 crontab&gt;man 5 crontab 使用命令 whatis 显示某个命令或实用程序的所有可用手册页的简短描述1&gt;whatis crontab Info/usr/share/info/Info工具是一个基于菜单的超文本系统，由GNU项目开发并由Linux发布。info工具包括一些关于Linux shell、工具、GNU项目开发程序的说明文档。与man相比，info工具可显示更完整的最新的GNU工具信息1&gt;info ls –help“–help”是一个工具选项1&gt;ls --help Howto文档/usr/share/doc/howtoor http://www.tldp.org/index.html 在线文档一些在线信息http://www.tldp.orghttp://www.linux.orghttp://www.redhat.comhttp://www.suse.comhttp://www.xfree86.orghttp://www.linuxplanet.comhttp://www.cert.orghttp://www.securityfocus.comhttp://www.kernel.orghttp://man.linuxde.net/ 在以下目录中提供了大多数已安装软件包包的帮助文件：/usr/share/doc/packages/package-name ls -l 查看文件的属性普通文件 -rw-r–r–目录文件 drwxr-xr-x字符设备文件 crw-rw-rw-块设备文件 brw-r—–套接字文件 srwxrwxrwx链接文件 lrwxrwxr—FIFO文件 prwxr—r–","link":"/2018/12/07/Linux/Class Notes/linux简介/"},{"title":"1-Function testing","text":"Function testing 也叫黑盒单元测试 针对每个功能单元进行的一种黑盒测试。 测试人员 可以是任何人：编码人员、测试人员等 覆盖程度 覆盖所有的功能以及用户可见的变量 测试的目的 为了使每个功能能够单独运作 测试方法 穷举法 边界值分析法 基于单/多缺陷假设设计测试样例 等价类划分法 典型数据法 … 如何分析结果 寻找同类功能做对比.同类功能：例如显卡的功能测试，找同类显卡，在相同的输入条件下比较输出结果。 复杂程度 对已实现的各个功能设计测试样例进行测试 严格程度 指测试方法对软件错误的容忍程度，即其发现软件错误的能力大小 对系统完成度的要求 每一个功能单元完成后便可以进行功能测试 优点 对每个测试项目进行全面分析 Easy to do as each function is implemented 缺点 Misses interactions Misses exploration of the benefits offered by the program","link":"/2018/12/10/Software Quality Assurance/Individual techniques/1-Function testing/"},{"title":"学用linux","text":"文件查找 findfind 在命令行上搜索文件1&gt;find path criterion action path：要搜索的文件系统部分（指定的目录及其所有子目录）。如果什么也没指定，则将使用当前目录下的文件系统。criterion：文件应该具有的属性：-name pattern 搜索名称中包含给定模式的文件。如果模式中包含元字符或通配符，则必须用引号将它括起。否则，它将由 shell 解释，而不是由 find 解释。-type file_type 搜索文件类型。适用的文件类型如下：“d”（用于目录）、“f”（用于文件）或者“l”（用于符号链接）。-ctime [+/-]days 搜索恰好在指定的几天前进行上一次修改的那些文件。action:影响以下条件或将搜索作为一个整体进行控制的选项，例如： -print -exec command 可使用选项 -exec 调用其他命令 例子 1&gt;find ~ -name kk* -type f –exec grep first {} \\; -print {} 这两个括号代表找到的并传递到命令 grep 的文件名的占位符。分号用于结束 -exec指令。由于它是特殊字符，所以在它前面放一个反斜杠，以此来标记它。 locate locate 是 find -name 的替代命令（必须装有软件包 findutils-locate）。首次使用要用updatedb生成/更新数据库。 查找命令所在目录whereis 命令 whereis 将返回二进制（选项 -b）、手册页（选项 -m）和指定命令的源代码（选项 -s）。该命令的速度比 find 快，但不如 find 全面。 123&gt;whereis -b ls&gt;whereis -m ls&gt;whereis -s ls which which 将搜索在变量 PATH 中为指定命令列出的所有路径，并返回该命令的完整路径。命令 which 特别适用于以下情况：不同目录中存在某个命令的几个版本，并且您想知道在未指定路径的情况下输入时将执行哪个版本。 1&gt;which find type命令 type command 可用来查找在输入 command 时执行哪类命令，是 shell 内置命令还是外部命令。选项 -a 在文件系统中传递采用该名称的命令的所有实例。12&gt;type type&gt;type grep 搜索文件内容 grep当需要查找包含特殊词、短语或项的所有文件，并且是扫描所有文件而不在编辑器中打开它们时&gt;grep search_pattern filename该命令将在文件名中进行搜索以寻找与 search_pattern 匹配的所有文本，并打印包含该模式的行。123456命令 grep 的可用选项如下： -i 忽略大小写。 -l 仅显示包含搜索字符串的文件的名称。 -r 递归地搜索整个目录树。 -v 给定不包含搜索字符串的所有行。 -n 显示行号。 1234&gt;grep test d* //显示所有以d开头的文件中包含test的行&gt;grep -n test aa bb cc//显示在aa，bb，cc文件中匹配test的行。 安装RPM包用rpm安装软件的命令格式如下： rpm -i [安装选项] rpm 软件包名 安装选项有很多，常用的如下： -vh ：显示安装过程中的详细信息； –percent：显示安装进度的百分比； –test：不进行安装软件包，只进行安装测试并显示简单的报告； –force：忽略任何错误，强制安装软件包。 更新、卸载RPM包 rpm -u rpm软件包名 rpm -e rpm软件包名 查询已安装的包版本rpm –qa |grep 软件包名","link":"/2018/12/07/Linux/Class Notes/学用linux/"},{"title":"10-Stochastic or Random Test","text":"Content What Why 特点 随机测试 黑盒测试 输入:Random，independent 输出:Compared against software specifications to verify that the test output is pass or fail 测试过程：自动化 覆盖范围：广泛但浅显 Why 随机测试可以让我们轻松的根据测试结果估算软件可靠性。 可以从随机测试中获得数据用于估计软件的可靠性(其他测试方法不能用这种方式来估算软件可靠性） 相比于其他更为周到的测试方法，可以节约精力和时间 特点 无需任何特定测试 在无文档、无计划下的软件测试 可以发现测试用例覆盖不到的bug 随机测试几乎可以在任何时候进行 测试软件的鲁棒性 发现低优先级高严重性的bug 对比与模糊测试的区别： 模糊测试：随机数据 随机测试：随机行为与探索性测试的区别： 随机测试：思维过程无序 探索性测试：思维过程具有有序性、合理性","link":"/2018/12/10/Software Quality Assurance/Individual techniques/10-Stochastic or Random Test/"},{"title":"11-structual testing","text":"DD-path覆盖 给定程序的一组测试用例，如果在程序上执行时，遍历程序图中的每个DD路径，则它们构成DD路径覆盖。 branch覆盖 给定程序的一组测试用例，如果在程序上执行时，遍历程序图中的决策（predicate）的每个分支（输出），则它们构成分支覆盖。 path coverage 给定程序的一组测试用例，如果在程序上执行时，遍历程序图中从源节点到汇聚节点的每条路径，则它们构成路径覆盖。 node coverage 如果在程序上执行时，遍历程序图中的每个节点，则它们构成节点覆盖。 edge coverage 遍历程序图中的每个边，则它们构成边缘覆盖。语句覆盖使所有的判断语句都能执行一次的条件案例，例如当判断语句事组合语句的时候，并且用or连接，只满足一个案例即可判定覆盖（分支覆盖）针对判断语句，在设定案例的时候，要设定True和False的两种案例；与语句覆盖不同的是增加了False的情况条件覆盖针对判断语句里面案例的取值都要去一次，不考虑条件的取值判定/条件覆盖判定覆盖各条件覆盖交叉，针对于判定中的条件取值组合覆盖判定-条件覆盖的加强版","link":"/2018/12/10/Software Quality Assurance/Individual techniques/11-structual testing/"},{"title":"3-Specification-based testing","text":"定义 黑盒测试、功能测试、数据驱动测试 测试者不了解程序的内部情况，不需具备应用程序的代码、内部结构和编程语言的专门知识。只知道程序的输入、输出和系统的功能，这是从用户的角度针对软件界面、功能及外部结构进行测试，而不考虑程序内部逻辑结构。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。 基本属性 目标：核验需求文档里每个要求的一致性。 测试者：可以任何人。 覆盖内容：文档化的需求以及一些特性。 潜在问题：实现与规格不匹配的问题。 评估方法：实现是否与规格匹配。 复杂度：由规格说明书决定 苛刻度：有规格说明书决定 如何在缺少规格说明书的情况下获取信息?有什么可行的替代方法？ 在缺少规格说明书或者是规格说明书不正确的时候可以使用使用如下资源 软件更新备忘录 用户手册草稿 产品资料 已发布的样式指南和UI标准 已发布的标准 第三方产品兼容性测试套件 内部备忘录 营销展示、产品概念 Bug报告 逆向工程 …. 规格说明 规格说明书要求做到精确和细化需求中描述的系统功能性需求和约束。 规格说明是为了技术人员编写的 规格说明书的形式可以是多种多样的。下面列出几个常见的规格说明书形式： 需求文档 用例 模型 形式化方法 原型 …","link":"/2018/12/10/Software Quality Assurance/Individual techniques/3-Specification-based testing/"},{"title":"2-Equivalence analysis","text":"Content 等价类划分 等价类划分指南 等价类划分实例 等价类 等价类是指某个输入域的子集合。在该子集合中，各个输入数据对于揭示程序中的错误都是等效的。 等价类划分 等价类划分，指一种典型的、重要的黑盒测试方法，它将程序所有可能的输入数据划分为若干个等价类。然后从每个部分中选取具有代表性的数据当做测试用例。利用这一方法设计测试用例可以不考虑程序的内部结构，以需求规格说明书为依据，选择适当的典型子集，认真分析和推敲说明书的各项需求，特别是功能需求，尽可能多地发现错误。等价类划分法是一种系统性的确定要输入的测试条件的方法。 有效等价类划分 有效等价类指对于程序规格说明来说，是合理的、有意义的输入数据构成的集合。利用有效等价类可以检验程序是否实现了规格说明预先规定的功能和性能。有效等价类可以是一个，也可以是多个，根据系统的输入域划分若干部分，然后从每个部分中选取少数有代表性数据当做数据测试的测试用例，等价类是输入域的集合。 以下是对有效等价类数据集的一些例子： 终端用户输入的命令 与最终用户交互的系统提示 接受相关的用户文件的名称 提供初始化值和边界等 提供格式化输出数据的命令 在图形模式（比如鼠标点击时）提供的数据 失败时显示的回应消息 无效等价类划分 无效等价类和有效等价类相反，无效等价类是指对于软件规格说明而言，没有意义的、不合理的输入数据集合。利用无效等价类，可以找出程序异常说明情况，检查程序的功能和性能的实现是否有不符合规格说明要求的地方。 以下是无效等价类数据集的一些例子： 终端在一个不正确的地方提供适当的值 验证外部边界的值 验证与边界和外部边界值的数值数据 等价类划分指南 等价类划分的方法 输入条件制定了一个域 输入条件指定了一组值的集合: 为集合中的每个元素创建一个等价类，为一个无效输入也创建一个等价类 输入条件指定了每一个单独的值：如果系统对每一个有效输入的处理都不同，那么为每一个有效输入创建一个等价类 输入条件指定了有效值的数量：为正确的输入数量创建一个等价类，为无效输入创建两个等价类——一个数量为零，一个比N大 输入条件指定了一个必须值：为该必须值创建一个等价类，为非必须值创建一个等价类 分割等价类：如果系统以不同方式处理一个划分好的等价类中的元素，那么分割该等价类为更小的等价类 从等价类中识别测试用例 为每个等价类指定一个唯一的标识符 对于每个还未被测试用例覆盖到的有效输入等价类，生成新的测试用例，尽量多地覆盖还未覆盖到的等价类，按照这一步骤重复进行，直到所有的有效等价类都被覆盖为止 对于每个还未被测试用例覆盖到的无效输入等价类，生成新的测试用例，仅覆盖一个还未覆盖到的等价类，按照这一步骤重复进行，直到所有的无效等价类都被覆盖为止。 等价类划分实例Ex A申请账号时，用户必须输入用户名、密码、确认密码，对每一项输入条件要求如下：用户命要求为6位以上，18位以下，使用英文字母、数字、“-”、“”,并且首字符必须为字母或数字；密码在6~16位之间，只能用英文字母、数字、“-”、“”,并且区分大小写。列出等价类表和测试用例。 等价类表：等价类的测试用例： Ex B一个程序读入3个整数，把这3个数值看作一个三角形的3条边的长度值。这个程序要打印出信息，说明这个三个数值不构成三角形、或是一般三角形、或是等腰的三角形、或是等边三角形。列出等价类表和测试用例。分析题目中给出和隐含的对输入条件的要求： 整数 2. 三个数 3. 非零数 4. 正数 5. 两边之和大于第三边 6.等腰 7. 等边如果a、b、c满足条件1~4，则输出下列四种情况之一：1）如果不满足条件5，则程序输出为“非三角形”2）如果三条边相等即满足条件7，则程序输出为“等边三角形”3）如果只有两条边相等，及满足条件6，则程序输出为“等腰三角形”4）如果三条边都不相等，则程序输出为“一般三角形”等价类表覆盖有效等价类的测试用例覆盖无效类等价类的测试用例","link":"/2018/12/10/Software Quality Assurance/Individual techniques/2-Equivalence analysis/"},{"title":"7-Exploratory Testing","text":"探索性测试 探索性测试（ET）可以说是一种测试思维技术。它没有很多实际的测试方法、技术和工具，但是却是所有测试人员都应该掌握的一种测试思维方式。探索测试强调测试人员的主观能动性，避免繁杂的测试计划和测试用例设计的文档制作过程，强调在碰到问题时及时改变测试策略 探索性测试的最大特色是在对测试对象进行测试的同时学习测试对象并设计测试，在测试过程中运用获得的关于测试对象的信息设计新的更好的测试.这相对于传统软件测试过程中严格的“先设计，后执行”来说，是具有很大区别的. 基本过程 识别软件系统的目的； 识别软件系统提供的功能； 识别软件系统潜在的不稳定的区域； 在探索软件系统的过程中记录关于软件的消息和问题； 创建一个测试纲要，使用它来执行测试。 优点 不需要太多的准备工作，能够很快的发现重要的错误。 测试人员可以根据先前的测试结果来调整之后的测试用例，这在某种意义上可以加快bug发现的过程。 对产品质量有个整体概念，可以作为整个项目里工作分级的一个基础。 缺点 测试用例很难全面覆盖。 容易出现重复测试，且测试难以跟踪。 需要测试人员具有较高水平。 适用范围 需要对新功能或是新产品提供快速的反馈的测试 为测试用例的设计,前期进行尝试性测试 已经过了传统测试,但需要进一步测试 对已有测试用例的改进 要求在短时间内发现一些重要缺陷的测试 管理人员需要测试一下测试人员的工作成果 测试某一特定类型的缺陷 测试一些已知的缺陷","link":"/2018/12/10/Software Quality Assurance/Individual techniques/7-Exploratory Testing/"},{"title":"5-Stress Testing","text":"Content 压力测试简述 压力测试特点 压力测试步骤 压力测试实例 Stress Testing 是指不断给被测系统增加压力，直到被测系统被压垮，并在系统被压垮的情况下持续测试。 以确定系统能承受的最大压力以及系统是否具有良好的容错能力和可恢复能力。 压力测试的特点 测试者：在软件压力测试方面具备专业知识和一定的操作技能的人 代码覆盖率：部分覆盖，难以界定是否覆盖完全 测试阶段：开发项目接近完成 粗颗粒度：压力测试极其粗糙 复杂性：根据软件自身的需求有所不同 优点 能暴露系统可能出现的缺陷 能暴露系统的安全风险 可能对评估性能、可靠性或效率有帮助 局限性 缺陷可能在压力测试下并不明显 当不知道问题的大致区间时，压力测试就会比较慢 易出现“不知道因为什么导致了问题”和“有没有遗漏什么”的问题 压力测试的步骤 Identify the Test Environment 确认测试环境 Identify Performance Acceptance Criteria 确认性能指标 Plan and Design Tests 计划并设计测试 Configure the Test Environment 配置测试环境 Implement the Test Design 实现设计好的测试 Execute the Test 执行测试 Analyze Results, Report, and Retest 分析、报告、重复测试 压力测试与其他测试的关系常见的测试有：负载测试、压力测试和性能测试。三者测试目的不同，但其手段和方法在一定程度上比较相似，通常会使用相同的测试环境和测试工具，而且都会监控系统所占用资源的情况以及其它相应的性能指标。 tester：三者都应该具有一定的专业水平 coverage：三者均为部分覆盖，存在局限性，难以确定是否覆盖了所有可能的缺陷 potential problem：压力测试是期望系统崩溃；负载测试是期望得到系统的响应时间和质量；性能测试时为了了解应用程序在常规参数下的行为方式 activities：压力测试往往要增加比负载测试多的并发用户，一般要比系统设计的并发量大，而性能测试验证产品资源的使用情况，可用性及可靠性 evaluation：压力测试是看服务器能否在崩溃后自我恢复，任何意外故障是否会损害系统安全性；负载测试是看系统的响应时间和质量是否符合设计要求及当前的基础设施是否足以运行应用程序；性能测试是看系统是否符合业务的性能需求，验证该应用程序能否正常运行 focus：性能测试的关注点在于程序运行的响应时间和并发量，负载测试的关注点在于系统并发量的多少，而压力测试更关注在超过了系统极限值的限制范围后系统的影响。","link":"/2018/12/10/Software Quality Assurance/Individual techniques/5-Stress Testing/"},{"title":"8-User Testing","text":"用户测试 定义：以用户为为参与主体的测试 引入原因：用户作为软件最终使用的主体 测试目标：测试软件的总体情况及用户体验 测试者：用户 覆盖面：很难度量 测试启动时间：软件开发基本完成 优点 暴露设计的问题 能找到高错误率的区域 测试过程能够被监控 能够通过内部实验室注意有争议的区域 缺点 覆盖面不能够保证 测试用例弱 结果好坏不一 必须区分营销测试与技术测试","link":"/2018/12/10/Software Quality Assurance/Individual techniques/8-User Testing/"},{"title":"6-Regression testing","text":"回归测试（Regression testing） 指在发生修改之后重新测试先前的测试以保证修改的正确性。理论上，软件产生新版本都需要进行回归测试，验证以前发现和修复的错误是否在新软件版本上再次出现。 回归测试通常被认为是“程序的重新确认”； “纠正型回归测试”指对程序修改后进行回归测试； “增量型回归测试”指程序增加新特性后进行测试。 回归测试多余？ 开发人员也可以通过适当的证据证明新增的方法对原方法没有影响，这种情况下回归测试是多余的。 必须进行回归测试的情况 当对软件的一个子系统进行修改，得到软件的一个新版本，此时回归测试是必需的； 当对软件的一个或多个构件进行了修改，整个软件也必须进行回归测试 在某些情况下，当底层硬件发生变化时，无论软件有无变更，也需要进行回归测试 回归测试过程 测试重确认/选择/最小化/优先级排序 测试重确认：检查p的测试用例，以确定哪些是对p’。重确认确保回归测试时只使用那些对p’有效的用例(p’为新版本) 测试选择：对p有效的测试对p’可能是多余的因为它们的执行轨迹不经过p’中已修改过的代码。识别那些执行轨迹经过p’修改部分的测试过程就称为测试选择，优势也称为回归测试选择(RTS)问题 测试最小化：根据某些准则丢弃那些多余的测试用例。例如t1和t2都测试了p的功能f，那么在测试最小化的时候，就可能丢弃t2而丢弃t1 测试优先级排序：是基于某些准则对测试用例进行排序。当资源受限，通过测试优先级排序，就会发挥作用 测试准备 测试准备是指将被测程序置于预期的或者模拟的测试环境中，准备接收数据，并产生，需要的输出信息 测试排序 测试过程中有可能关心对软件的测试输入顺序。对具有内部状态且连续运行的软件来讲，测试排序非常重要。银行结算软件、web服务、引擎控制器等都是这类软件 测试执行- 输出比较 故障消除","link":"/2018/12/10/Software Quality Assurance/Individual techniques/6-Regression testing/"},{"title":"4-Risk-based Testing","text":"Content Targets, concept and benefits of RBT Risk and Risk management Risk-based testing approach Risk-based testing in practice Risk matrix and Risk reporting Risk-based testing and test automation Why Risk-based Testing? Software projects are very rarely on time,schedule or budget. Very often early project phases are delayed. When eventually comes down to testing, the time to delivery is extremely short and there is no budget left due to the development overrun. During development everybody is as a rule extremely busy resulting the test preparation activities not receiving the appropriate attention. RBT RBT(Risk-based Testing) is a test method deciding the test strategy by analyzing and accessing the risk of product. Reduced resource consumption(i.e., more efficient testing) Improved quality by spending more time on critical functions. Risk and Risk management Risk Identification Risk Strategy Risk Assessment Risk Mitigation Risk Reporting","link":"/2018/12/10/Software Quality Assurance/Individual techniques/4-Risk-based Testing/"},{"title":"9-Scenario testing","text":"场景测试 在软件开发过程的测试阶段中，由于实际系统过分庞大和复杂，很难测试其全部功能，而只能测试其与执行的任务有类似性的主要功能 目标 使用具有挑战性的案例来反映实际的使用 测试者 Anyone 覆盖率 场景所能覆盖的所有区域 可能存在的问题 有经验的用户在实际使用时的复杂交互 活动 采访相关人员，写场景剧本然后执行测试 复杂度 高 被测试系统阶段 后期 需要稳定 集成的功能 优势 可以帮助解决复杂、现实中的问题。解决一些因为复杂而难以建模分析的情况。 暴露随着时间的流逝而可能会出现的错误。 可以使测试情景与将来的工作情境尽可能相似，测出的结果具有很好的预测效果 缺陷 单个功能的错误会让这个测试变得效率底下。 必须思虑周详以达成好的覆盖。测试者需要较有经验。 分析过程较为人为化，客观性受到影响","link":"/2018/12/10/Software Quality Assurance/Individual techniques/9-Scenario testing/"},{"title":"1-Software Engineering Practices","text":"Some things Testers should know about them Objectives Identify some common software development problems. Identify six software engineering practices for addressing common software development problems 常见的软件开发问题症状 User or business needs not met Requirements churn Modules don’t integrate Hard to maintain Late discovery of flaws Poor quality or poor user experience Poor performance under load No coordinated team effort Build-and-release issues 六种软件工程实践Develop IterativelyManage RequirementsUse Component ArchitecturesModel Visually (UML)Continuously Verify QualityManage Change Develop Iteratively 瀑布模型特点 Delays confirmation of critical risk resolution Measures progress by assessing work-products that are poor predictors of time-to-completion Delays and aggregates integration and testing Precludes early deployment Frequently results in major unplanned project extensions 迭代模型特点 最早的迭代可以解决最大的风险.每次迭代都会生成可执行版本. 每次迭代都包括集成和测试。迭代有助于: 在进行大量投资之前解决重大风险 实现早期客观反馈 使测试和集成持续进行 将项目重点放在可实现的短期目标里程碑上 可以部署完成的最终系统的部分实现 Manage Requirements 为了帮助管理需求与从这些需求派生的测试之间的关系，您可以在这些元素之间建立可跟踪性关系.可追溯性有助于我们做很多事情，包括： 评估项目对需求变更的影响 评估测试失败对需求的影响（如果测试失败，可能不满足要求） 验证应用程序是否仅执行预期的操作 验证实施是否满足系统的所有要求 管理项目范围 管理变更 Component-Based Architecture 弹性 满足当前和未来的要求 提高可扩展性 允许重用 封装系统依赖性 基于组件 重用或自定义组件 从市售组件中选择 逐步发展现有软件 Model Visually (UML)详情见软件分析与设计课程总结 Continuously Verify Quality详情见软件分析与设计课程总结 Manage Change Changes to enable iterative development Secure workspaces for each worker Parallel development possible Automated integration/build management","link":"/2018/12/08/Software Quality Assurance/Class Notes/1-Software Engineering Practices/"},{"title":"2-Software Quality","text":"Objectives Introduce software quality Provide stakeholder-centric visions of quality and defect Identify software quality assurance Define quality Fitness for use –Dr. Joseph M. Juran The totality of features and characteristics of a product that bear on its ability to satisfy a given need –American Society for Quality Conformance with requirements –Philip Crosby conforms to specifications Quality is value to some person.– Gerald M. Weinberg key dimensions of quality Customer Satisfiers the right features adequate instruction Customer Dissatisfiers unreliable hard to use too slow incompatible with the customer’s equipment Dimensions of Quality: FURPS Functionality Test the accurate workings of each usage scenario Usability Test application from the perspective of convenience to end-user. Reliability Test the application behaves consistently and predictably. Performance Test online response under average and peak loading Supportability Test the ability to maintain and support application under production use A Broader Definition of Dimensions of Quality Accessibility Capability Compatibility Concurrency Conformance to standards Efficiency Installability and uninstallability Localizability Maintainability Performance Portability Reliability Scalability Security Supportability Testability Usability…… Definition of SQA Software quality assurance (SQA) is:A systematic, planned set of actions necessary to provide adequate confidence that the software development process or the maintenance process of a software system product conforms to established functional and technical requirements as well as with the managerial requirements of keeping the schedule and operating within the budgetary confines. 系统的，有计划的一系列行动，以充分确信软件开发过程或软件系统产品的维护过程符合既定的功能和技术要求，以及在预算范围内保持计划和操作的管理要求。 SQA system component classes Pre-project quality components Project life cycle quality components Infrastructure error preventive and improvement components Software quality management components Standardization, certification and SQA assessment components Organizing for SQA – the human components","link":"/2018/12/08/Software Quality Assurance/Class Notes/2-Software Quality/"},{"title":"4-The RUP Test Discipline","text":"Objectives The terminology of RUP The testing discipline in RUP The testing workflow structure WHAT The Rational Unified Process (RUP) is a software engineering process framework that provides a disciplined yet flexible approach to assigning tasks and responsibilities within a software development organization. RUP’s goal is to support the production of high-quality software that meets the needs of its end users within a predictable schedule and budget. The RUP supports many software engineering practices The dynamic structure (phases and iterations) of the Rational Unified Process creates a basis for iterative development. The Project Management discipline describes how to set up and execute a project using phases and iterations. The Use-Case Model and Risk List of the Requirements discipline help determine what functionality you implement in each iteration. The Workflow Details of the Requirements discipline show the activities and artifacts that make requirements management possible. The iterative approach allows you to progressively identify components, decide which ones to develop, which ones to reuse, and which ones to buy. The Unified Modeling Language (UML) used in the process represents the basis of Visual Modeling and has become the de facto modeling language standard. The focus on software architecture allows you to articulate the structure: the components and the ways in which they integrate, the fundamental mechanisms and patterns by which they interact The Rational Unified Process has four phases: Inception - Define the project scope, gain agreement on project objectives, baseline the product Vision Elaboration - Address key technical risks, produce an evolutionary prototype, baseline the Architecture Construction - Iteratively and incrementally develop an operationally complete product Transition - Deliver the product into the live end-user environment 初始 - 定义项目范围，就项目目标达成一致，为产品愿景奠定基础 精化 - 解决关键技术风险，制作演化原型，建立基线 构建 - 迭代并逐步开发出操作完整的产品 过渡 - 将产品交付给实时最终用户环境 Roles in the Test Discipline Test Manager is tasked with the overall responsibility for the test effort’s success. Test Analyst is responsible for initially identifying and defining the required tests, and subsequently evaluating the results of the test effort. Test Designer is responsible for defining the test approach and ensuring its successful implementation. Tester is responsible for the core activities of the test effort, which involves conducting the necessary tests and logging the outcomes of that testing. Define Evaluation Mission Identify the appropriate focus of the test effort for the iteration. Gain agreement with stakeholders on the corresponding goals that will direct the test effort. Test and Evaluate Achieve appropriate breadth and depth of testing to enable a sufficient evaluation of the targeted test items. Achieve Acceptable Mission Deliver a useful evaluation result to the stakeholders of the test effort. Actively prioritize the test work that remains to be conducted. Verify Test Approach Demonstrate the techniques outlined in the Test Approach will support the required testing. Verify that the approach will work, produce accurate results and is appropriate for the available resources. Validate Build Stability Validate that the build is stable enough for detailed test and evaluation work to begin Improve Test Assets Maintain and improve the evolving test assets. (e.g. Maintain test suites and test data; harvest test-ideas into catalogs; clarify change request details)","link":"/2018/12/08/Software Quality Assurance/Class Notes/4-The RUP Test Discipline/"},{"title":"3-Introduction to Software Testing","text":"Objectives Introduce foundation topics of software testing Explain test ideas Introduce test matrices Definition of Software Testing Software testing is a process, or a series of processes, designed to make sure computer code does what it was designed to do and that it does not do anything unintended. Software should be predictable and consistent, presenting no surprises to users. Testing is the process of executing a program with the intent of finding errors. Software testing objectives 在测试软件中识别和揭示尽可能多的错误 在将已识别的错误和重新测试校正后，将测试的软件带到可接受的质量水平。 在预算和调度限制内有效地执行所需的测试。 编译软件错误记录以用于错误预防（通过纠正和预防措施）。 Test model Classification of software testing Vital Program Testing Guidelines Functional Testing 是黑盒测试 对性能以外的任何外部可见或可测量的软件属性感兴趣。 Test Ideas A test idea is a brief statement that identifies a test that might be useful. A test idea differs from a test case, in that the test idea contains no specification of thetest workings, only the essence of the idea behind the test. Test ideas are generators for test cases: potential test cases are derived from a test ideas list. A key question for the tester or test analyst is which ones are the ones worth trying. Where Do Test Ideas Come From? Models Specifications Customer complaints Brainstorm sessions among colleagues Bug lists Representative exemplars","link":"/2018/12/08/Software Quality Assurance/Class Notes/3-Introduction to Software Testing/"},{"title":"6-Test & Evaluate","text":"Content Defining test techniques Individual techniques Using techniques together Dimensions of Test Techniques Think of the testing you do in terms of five dimensions: Testers: who does the testing. Coverage: what gets tested. Potential problems: why you’re testing (what risk you’re testing for). Activities: how you test. Evaluation: how to tell whether the test passed or failed. Of the 200+ published Functional Testing techniques, there are ten basic themes.They capture the techniques in actual practice. Function testing Equivalence analysis Specification-based testing Risk-based testing Stress testing Regression testing Exploratory testing User testing Scenario testing Stochastic or Random testing详情见 Individual techniques 目录","link":"/2018/12/08/Software Quality Assurance/Class Notes/6-Test & Evaluate/"},{"title":"5-Define Evaluation Mission","text":"Content Define Evaluation Mission Defining the mission of the test group Defining the goal for test documentation In this module, we begin with the workflow detail Define Evaluation Mission The Mission focuses on the high-level objectives of the test team for the current iteration Define Evaluation Mission The purpose of this workflow detail is to: 确定迭代测试工作的适当重点。 与利益相关方就实现测试工作的相应目标达成协议 对于每次迭代，工作主要集中在： 确定测试工作的目标和可交付成果 确定良好的资源利用战略 为测试工作定义适当的范围和边界 概述将使用的方法 确定如何监控和评估进展情况。 Defining the Test Approach The test approach (testing strategy)specifies the techniques that will be used to accomplish the test mission. The test approach also specifies how the techniques will be used. A good test approach is: Diversified Include a variety of techniques. Each technique is tailored to expose certain types of problems, and is virtually blind to others. Combining them allows you to find problems that would be hard to find if you spent the same resource on a narrower collection of techniques. Risk-focused Tests give you the opportunity to find defects or attributes of the software that will disappoint, alienate, or harm a stakeholder. You can’t run all possible tests. To be efficient, you should think about the types of problems that are plausibly in this product or that would make a difference if they were in this product, and make sure that you test for them. Product-specific Generic test approaches don’t work. Your needs and resources will vary across products. The risks vary across products. Therefore the balance of investment in different techniques should vary across products. Practical here’s no point defining an approach that is beyond your project’s capabilities (including time, budget, equipment, and staff skills). Defensible Defining the goal for test documentation What Test Documentation Should You Use? Test planning standards and templates Requirements considerations Questions to elicit information about test documentation requirements for your project IEEE Standard 829 for Software Test Documentation","link":"/2018/12/08/Software Quality Assurance/Class Notes/5-Define Evaluation Mission/"},{"title":"期末总结","text":"目录OS structure Process Thread CPU Scheduling Process Synchronization Deadlock Memory Management Virtual Memory File System IO System Secondary Storage OS structure 操作系统服务: 用户界面 程序执行 I/O操作 文件系统操作 通信 错误检查 资源分配 保护 System Calls系统调用： 系统调用提供在运行程序和操作系统之间的接口 主要通过高级应用程序接口(API)而不是直接系统调用来访问三种常用方式用于在运行程序和操作系统之间的参数传递：寄存器 内存中的表 参数入栈 System Structure – Layered Approach系统结构 层次化结构操作系统划分为若干层，在低层上构建高层。底层（0层）为硬件；最高层（ N层）为用户层，考虑模块化，层的选择是每层只使用低层次的功能和服务，以便于系统调试和验证。 优点： 低层和高层可分别实现（便于扩充）； 高层错误不会影响到低层，便于调试、利于功能的增删改； 调用关系清晰（高层对低层单向依赖），避免递归调用，有利于保证设计和实现的正确性 缺点： 系统中所有进程的控制转移、通讯等任务全部交给系统的核心去管理，要花费一定的代价 Microkernels 微内核通过划分系统程序和用户程序，把所有不必要的部件移出内核，形成一个小内核，提供最少量的进程管理存储管理，以及通信功能. 优点： 易于扩充，易于移植 提高系统的可靠性： 提供多种操作环境 便于实现分布计算：以同样的调用形式，在下层可通过核心中的网络传送到远方服务器上 (RPC,Remote Procedure Call) 缺点： 消息传递方式增加开销，使响应变慢 用户目标 操作系统应该便于使用，易学，可靠，安全并且快捷 系统目标 操作系统应该容易设计、实现和维护，还要灵活、可靠、无错误和高效 Process 进程 - 在执行中的程序； 一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程。为了描述程序在并发执行时对系统资源的共享，我们需要一个描述程序执行时动态特征的概念，这就是进程。 进程的特征结构特征：进程实体=程序段+相关的数据段+PCB进程控制块。动态性：进程的实质是进程实体的一次执行过程，因此动态性是进程的最基本的特征。并发性: 多个进程实体同存在于内存中，且能在一段时间内同时运行。是最重要的特征。独立性：指进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。异步性: 进程按各自独立的、不可预知的速度向前推进。 进程状态 Schedulers调度长程调度（或作业调度）- 选择可以进入就绪队列的进程短程调度（或CPU调度）- 选择可被下一个执行分配CPU的进程中程调度：为了缓和内存紧张的情况，将内存中处于阻塞状态的进程换至外存上（挂起），降低多道程序的度。当这些进程重新具备运行条件时，再从外存上调入内存。 Context Switch上下文切换 当CPU切换至另一个进程时，系统必须保存旧进程状态并为新进程调入所保留的状态 上下文切换的时间开销较重；在切换时，系统没有做有用的工作 时间取决于硬件的支持 进程创建的过程 申请空白的PCB 为新建立的进程分配资源 初始化程序控制块 将新进程插入就绪队列 编写一段程序，使用fork()创建两个子进程。当此程序运行时，在系统中有一个父进程和两个子进程活动。让每一个进程在屏幕上显示一个字符：父进程显示字符“a”；子进程分别显示字符“b”和字符“c”。 123456789101112131415#include &lt;stdio.h&gt;main(){ int p1,p2; while((p1 = fork()) == -1); if(p1==0)------------创建成功一子进程 putchar('b'); else { while((p2 = fork()) == -1); if(p2 == 0) putchar(‘c’); -------创建成功,另一子进程 else putchar(‘a’);--------父进程 }} 进程的控制修改已编写的程序，将每个进程输出一个字符改为每个进程输出一句话.如果在程序中使用系统调用lockf()来给每一个进程加锁，可以实现进程之间的互斥，观察并分析出现的现象。 1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;main(){ int p1,p2,i; while((p1 = fork()) == -1); if (p1==0) { lockf(1,1,0); for(i=0;i&lt;100;i++) printf(\"son %d\\n\",i); lockf(1,0,0); } else{ while((p2 = fork()) == -1); if(p2 == 0) { lockf(1,1,0); for(i=0;i&lt;100;i++) printf(\"daughter %d\\n\",i); lockf(1,0,0); } else { lockf(1,1,0); for(i=0;i&lt;100;i++) printf(\"parent %d\\n\",i); lockf(1,0,0); } }} Thread 进程：资源分配和CPU调度线程：作为CPU调度单位，而进程只作为其他资源分配单位。只拥有必不可少的资源，如：线程状态、程序计数器、寄存器上下文和栈同样具有就绪、阻塞和执行三种基本状态与同属一个进程的其它线程共享进程拥有的全部资源可并发执行 线程的优点：减小并发执行的时间和空间开销（线程的创建、退出和调度），因此容许在系统中建立更多的线程来提高并发程度。线程的创建时间比进程短；线程的终止时间比进程短；同进程内的线程切换时间比进程短；由于同进程内线程间共享内存和文件资源，可直接进行不通过内核的通信； Kernel Threads内核线程：由内核支持，在内核空间执行线程创建、调度和管理。依赖于OS核心，由内核的内部需求进行创建和撤销，用来执行一个指定的函数。 User Threads 用户线程：不依赖于OS核心，应用进程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。度由应用软件内部进行，通常采用非抢先式和更简单的规则，也无需用户态/核心态切换，所以速度特别快。 多线程模型多对一：多个用户级线程映像进单个内核线程，任一时刻只能有一个线程可以访问内核(并发性低)，一个用户线程发起系统调用而阻塞，则整个进程阻塞。一对一：每个用户级线程映像进内核线程，提供了更好的并发性，带来了额外开销,所以许多系统限制应用中的线程数目多对多：不限制应用的线程数、多个线程可以并发 LightWeight Process 轻权进程：它是内核支持的用户线程,是内核数据结构，驻留在内核空间。一个进程可有一个或多个轻权进程，每个轻权进程由一个单独的内核线程来支持。 Resource needs of thread types: 线程需要的资源内核线程：小数据结构及栈；线程切换不需要内存访问信息 - 相对快LWP:带有寄存器数据的PCB，记账和内存信息；在LWP之间切换相对慢用户级线程：只需栈及程序计数器；无内核涉及所以切换快。内核只关注支持用户级线程的LWP CPU Scheduling CPU的三级调度高级(Long-term)调度——作业调度决定把外存输入井上处于作业后备队列上的哪些作业调入内存，并为它们创建进程、分配必要的资源，然后再将新创建的进程排在就绪队列上，准备执行。低级(Short-term)调度——进程调度决定就绪队列中哪个进程将获得处理机，然后由分派程序执行把处理机分配给该进程的操作。 CPU脉冲的分布在系统中,存在许多短CPU脉冲,只有少量的长CPU脉冲比如:I/O型作业具有许多短CPU脉冲,而CPU型作业则会有几个长CPU脉冲,这个分布规律对CPU调度算法的选择是非常重要的. CPU的调度方式非抢占方式(nonpreemptive)把处理机分配给某进程后，便让其一直执行，直到该进程完成或发生某事件而被阻塞时，才把处理机分配给其它进程，不允许其他进程抢占已经分配出去的处理机。优点:实现简单、系统开销小，适用于大多数批处理系统环境缺点:难以满足紧急任务的要求，不适用于实时、分时系统要求抢占方式（Preemptive mode）允许调度程序根据某个原则，去停止某个正在执行的进程，将处理机重新分配给另一个进程。时间片原则 优先权原则 短作业优先 Dispatcher 分派程序：负责将对CPU的控制权转交给短调度选择的进程 Scheduling Criteria(调度准则)CPU utilization – keep the CPU as busy as possible（CPU利用率 – 使CPU尽可能的忙碌）Throughput – the number of processes that complete their execution per time unit（吞吐量 – 单位时间内运行完的进程数）Turnaround time – the interval from submission to completion （周转时间 – 进程从提交到运行结束的全部时间 ）Waiting time – amount of time a process has been waiting in the ready queue（等待时间 – 进程在就绪队列中等待调度的时间片总和 ）Response time – amount of time it takes from when a request was submitted until the first response is produced, not output (for time-sharing environment)（响应时间 – 从进程提出请求到首次被响应的时间段[在分时系统环境下不是输出完结果的时间] ） Scheduling Algorithm调度算法·先来先服务(FCFS)可用于作业或进程调度算法的原则是按照作业到达后备作业队列（或进程进入就绪队 列）的先后次序来选择作业（或进程）属于非抢占方式易于实现，表面上很公平，实际上有利于长作业，不利于短作 业；有利于CPU繁忙型，不利于I/O繁忙型。 ·短作业优先(SJF)非抢占与抢占都可以SJF是最优的 – 对一组指定的进程而言，它给出了最短的平 均等待时间。采用SJF有利于系统减少平均周转时间,提高系统 吞吐量。 ·优先权调度(Priority Scheduling)每个进程都有自己的优先数[整数]CPU分配给最高优先级的进程[假定最小的整数最高的优先级]SJF是以下一次CPU脉冲长度为优先数的优先级调度在用户进程中，I/O繁忙的进程应优先于CPU繁忙的进程，以保证CPU和I/O设备之间的并行操作。进程执行时间及内存需要少的进程应赋予较高的优先权；由用户的紧迫程度及用户所付费用来确定进程的优先权。在分时系统中，前台进程应优先于后台进程 ·时间片轮转(Round Robin)每个进程将得到小单位的CPU时间[时间片]，通常为10-100毫 秒。时间片用完后，该进程将被抢占并插入就绪队列末尾一般来说，RR的平均周转时间比SJF长，但响应时间要短 ·多级队列调度(Multilevel Queue)按进程的属性来分类，如进程的类型、优先权、占用内存的多少,每类进程组成一个就绪队列，每个进程固定地处于某一个队列 多级反馈队列调度算法(Multilevel Feedback Queue)存在多个就绪队列，具有不同的优先级，各自按时间片轮转法调度允许进程在队列之间移动各个就绪队列中时间片的大小各不相同，优先级越高的队列时间片越小。当一个进程执行完一个完整的时间片后被抢占处理器，被抢占的进程优先级降低一级而进入下级就绪队列，如此继续，直至降到进程的基本优先级。而一个进程从阻塞态变为就绪态时要提高优先级最后会将I/O型和交互式进程留在较高优先级队列 ·Highest Response Ratio Next (HRRN)高响应比优先调度算法高响应比优先调度算法—基于优先权算法 在每次选择作业投入运行时，先计算后备作业队列中每个作业的响应比RP,然后选择其值最大的作业投入运行。RP值定义为： RP＝（已等待时间＋要求运行时间）／要求运行时间 ＝1＋已等待时间／要求运行时间HRRN算法实际上是FCFS算法和SJF算法的折衷优点：等待时间相同，则SJF；要求的服务时间相同，则FCFS；长作业的优先级随着等待时间的增加而提高，不会出现得不到响应的情况。 CPU调度算法很多,如何选择适当的算法?首先定义一个标准 (根据要实现的系统所追求的目标,如CPU利用 率\\系统吞吐量\\平均周转时间\\响应时间等)然后根据标准来选择适当的算法采用相应的模型来评价算法 Process Synchronization 进程间的交互关系互斥，指多个进程不能同时使用同一个资源；同步，进程之间的协作；死锁，指多个进程互不相让，都得不到足够的资源；饥饿，指一个进程一直得不到资源(其他进程可能轮流占用资源) 为了保证数据的一致性,需要有同步机制来保证多个进程对共享数据的互斥访问.临界区(critical section)：进程中访问临界资源的一段代码。实现进程对临界资源的互斥访问—各进程互斥的进入自己的临界区。假定一个系统有n个进程{P0,P1,……,Pn-1},每个进程有一个代码段称为临界区,在该区中进程可能修改共享变量\\更新一个表\\写一个文件等.当一个进程在临界区中执行时,其他进程都不能进入临界区 同步机制应遵循的准则空闲则入：其他进程均不处于临界区；忙则等待：已有进程处于其临界区；有限等待：等待进入临界区的进程不能”死等”；让权等待：不能进入临界区的进程，应释放CPU（如转换到阻塞状态） 算法123 详见ppt 不重要 主要看信号量和PV操作 死锁 – 两个或多个进程无限期地等待一个事件的发生，而该事件正是由其中的一个等待进程引起的 Semaphore机制（信号量） PV操作讨论（需要做题练习）步骤：信号量的设置；给信号量赋初值（常用的互斥和同步信号量值的大小）；P、V操作安排的位置, PV 操作要成对出现 管程 Deadlock 死锁Deadlock：计算机系统中多道程序并发执行时，两个或两个以上的进程由于竞争资源而造成的一种互相等待的现象（僵局），如无外力作用，这些进程将永远不能再向前推进。 Each process utilizes a resource as follows（每一个进程如下的利用资源）request （申请）：如果申请不能立即被允许，那么进程必须等待直到能获取资源。（通过系统调用或者信号量来进行资源的申请和释放）use （使用）：进程使用资源进行相关操作Release（释放）：进程释放资源 死锁的原因·竞争资源引起死锁当系统中供多个进程所使用的资源，不足以同时满足它们的需要时，引起它们对资源的竞争而产生死锁·进程推进顺序不当引起死锁在多道程序系统中，并发执行的进程推进序列不可预测有些推进顺序，进程可以顺利完成有的推进顺序会引起进程无限期地等待永远不会发生的条件而不能向前推进，造成死锁 Deadlock Characterization（死锁的特性）四个条件同时出现，死锁将会发生Mutual exclusion 互斥：一次只有一个进程可以使用一个资源Hold and wait 占有并等待：一个至少持有一个资源的进程等待获得额外的由其他进程所持有的资源No preemption 不可抢占：一个资源只有当持有它的进程完成任务后，自由的释放Circular wait 循环等待：等待资源的进程之间存在环 资源分配图如果图没有环，那么不会有死锁如果图有环如果每一种资源类型只有一个实例，那么死锁发生如果每种资源类型有多个实例，可能死锁 处理死锁的方法 忽略、预防、避免、检测、解除忽略：鸵鸟策略预防：互斥：共享资源不是必须的，必须保持非共享资源占有并等待：必须保证进程申请资源的时候没有占有其他资源。没有资源时，可以申请资源。在申请更多其它资源之前，需要释放已有资源非抢占：如果一个进程的申请没有实现，它要释放所有占有的资源。抢占的资源放入进程等待资源列表中。只有进程能够重新得到旧的资源和新申请的资源时，才可以重新开始循环等待：将所有的资源类型放入资源列表中，并且要求进程按照资源表申请资源避免：确保系统永远不会进入不安全状态银行家算法 安全算法实例！找安全序列 大题检测：检测算法解除：处理死锁：操作员人工处理 进程终止 资源抢占 Memory Management Logical address – generated by the CPU; also referred to as virtual address.（逻辑地址—由CPU产生；也叫做虚拟空间。） Physical address – address seen by the memory unit.（物理地址—内存设备所读入的地址） 地址重定位：将程序装入到与其地址空间不一致的物理空间，所引起的一系列地址变换过程。 在MMU策略中，在其值送入内存的时候，基址寄存器Relocation register中的值被加入到用户进程所产生的每个地址中。 动态加载 动态链接 覆盖 交换 存储管理方式：连续分配方式：为一个程序分配一段连续的内存空间，主要有：a) 单一连续区管理方式：用户区 只能容纳一道作业，基址寄存器策略由来保护用户进程。基址寄存器包含最小物理地址的值；限长寄存器包含逻辑地址的范围，每个逻辑地址必需比限长寄存器的值小。b) 多分区管理方式，是一种可用于多道程序的较简单的存储管理方式，又分为:i. 固定分区方式： 固定式分区是在作业装入之前，内存就被划分成若干个固定大小的连续分区。 划分工作可以由系统管理员完成，也可以由操作系统实现。 一旦划分完成，在系统运行期间不再重新划分，即分区的个数不可变，分区的大小不可变，所以，固定式分区又称为静态分区。 优点：易于实现，开销小。 缺点：分区大小固定: 内碎片分区总数固定: 限制并发执行的进程数目。 采用的数据结构：分区表－－记录分区的大小和使用情况ii. 可变分区方式：分区的划分是动态的,不是预先确定的 分区分配算法a) First-fit（首先适应）: 从空闲分区表的第一个表目开始查找，把找到的第一个满足要求的空闲区分配给作业，目的在于减少查找时间。通常将空闲分区表（空闲区链）中的空闲分区要按地址由低到高进行排序。特点：i. 分配和释放的时间性能较好，较大的空闲分区可以被保留在内存高端。ii. 随着低端分区不断划分而产生较多小分区，每次分配时查找时间开销会增大。iii. 在系统不断地分配和回收中，必定会出现一些不连续的小的空闲区，称为外碎片。虽然可能所有碎片的总和超过某一个作业的要求，但是由于不连续而无法分配。 b) 最佳适应算法（Best Fit）：从全部空闲区中找出能满足作业要求的、且最小的空闲分区. 能使碎片尽量小。为提高查找效率，空闲分区表（空闲区链）中的空闲分区要按从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配特点：i. 从个别来看，外碎片较小，但从整体来看，会形成较多无法利用的碎片。ii. 较大的空闲分区可以被保留。c) Worst-fit（最差适应）：搜索整个序列，寻找最大的分区进行分配。 碎片Fragmentationa) External fragmentation（外碎片） – total memory space exists to satisfy a request, but it is not contiguous.（整个内存空间用来满足一个请求，但它不是连续的。）原因：因为这种分配要求把作业必须安置在一连续存储区内的缘故。b) Internal fragmentation（内碎片） – allocated memory may be slightly larger than requested memory; this size difference is memory internal to a partition, but not being used.（分配的内存可能比申请的内存大一点，这两者之间的差别是内部不被使用的簇）c) 只有重定位是动态的时候，才有可能进行紧缩，紧缩在执行时期进行，通过紧缩来减少外碎片，把一些小的空闲内存结合成一个大的块。但要移动大量信息从而浪费处理机时间,代价比较高,且 必须获得硬件支持。d) 分页存储管理是解决存储碎片的一种方法，要避开连续性要求，允许进程的物理地址空间不连续。 Paging分页：进程的逻辑地址空间可以是不连续的，如果有可用的物理内存，它将分给进程。把物理内存分成大小固定的块，把逻辑内存也分为固定大小的块，叫做页。运行一个有N页大小的程序，需要找到N个空的页框读入程序。建立一个页表，把逻辑地址转换为物理地址。（CPU产生的地址被分为）:a) Page number (p) （页号）– used as an index into a page table which contains base address of each page in physical memory.（它包含每个页在物理内存中的基址，用来作为页表的索引。）b) Page offset (d) （偏移）– combined with base address to define the physical memory address that is sent to the memory unit.（同基址相结合，用来确定送入内存设备的物理内存地址。） 页表的实现：页表被保存在主存中。a) Page-table base register (PTBR) points to the page table.（页表基址寄存器指向页表）b) Page-table length register (PRLR) indicates size of the page table.（页表限长寄存器表明页表的长度）c) 在这个机制中，每一次的数据/指令存取需要两次内存存取，一次是存取页表，一次是存取数据d) associative registers (通过一个联想寄存器，可以解决两次存取的问题）translation look-aside buffers (TLBs).翻译旁氏缓冲器 联想寄存器(TLBs).： 基本的地址变换机构：从逻辑地址到物理地址的转换:将用户程序中的页号变换成内存中的物理块号 地址变换过程ch09 ppt56页 看不懂。。 多级页表：由于每一级都分开的以表的形式存储在内存中，把一个逻辑地址转换为一个物理地址可能要进行4次内存存取。）多级页表的引入，使逻辑地址到物理地址的变换时间增加了。尽管每次内存存取的时间是很大的，高速缓存使执行的时间还是可以接受的。 Hashed Page Tables散列页表 Inverted Page Table 反向页表：倒置页表，按照整个物理内存建造一张表。减少了页表占用的内存空间量,但是增加了查找表的时间，因为页表是按物理块的顺序组织的，而查找是按虚地址进行的 Shared Pages 贡献页表 纯分页：没有外碎片，每个内碎片不超过页大小。一个程序不必连续存放。程序全部装入内存。 Segmentation 分段：一个程序是一些段的集合，一个段是一个逻辑单位 Segmentation with Paging段页式：既具有分页系统能有效地提高内存利用率的优点，又具有分段系统能很好地满足用户需要的长处，是一种有效的存储管理方式。 Virtual Memory 背景：进程必须全部放入内存后方可运行， 如果进程大于内存的容量或者内存中同时运行多个进程，解决的方法是：从物理上扩充内存容量从逻辑上扩充内存容量 常规存储器的特征一次性： 作业在运行前需要一次性的全部装入内存驻留性：作业装入内存后，便一直驻留在内存中，直到作业结束。 局部性原则：时间 空间 虚拟内存：允许进程部分装入内存就可以执行的技术。只有运行的部分程序需要在内存中，逻辑地址空间能够比物理地址空间大。必须允许页面能够被换入和换出 虚拟内存通过请求页式和请求段式来执行 特点：离散性（最基本特征） 多次性（最重要特征）对换性：内存和外村的兑换区之间换入换出虚拟性：从逻辑上扩充内存容量 优点：小内存执行较大用户程序 可容纳更多程序并发执行 简化编程操作不影响编程的程序结构 虚拟空间大于物理内存 页面调入策略：预调页策略 主动准确率不高 用于首次调请求调页策略：进程运行中发生缺页时，由系统将缺页调入内存，目前大多采用此策略。开销较大 缺页中断机构：在请求分页系统中，每当所要访问的页面不在内存时，便要产生一次缺页中断，请求OS将所缺页调入内存。与一般中断的主要区别在于：a. 缺页中断在指令执行期间产生和处理中断信号，而一般中断在一条指令执行完后检查和处理中断信号。b. 缺页中断返回到该指令的开始重新执行该指令，而一般中断返回到该指令的下一条指令执行。c .一条指令在执行期间，可能产生多次缺页中断。 处理页面错误的步骤：a. check the internal page table to determine whether the reference was a valid or invalid 查找页表来确定此次地址访问是否合法b. if it was invalid, terminates the process. If it was valid, but not in memory, then page it in.如果不合法,则中止该进程; 否则如果有效但不在内存，即发生了缺页,则需要将其调入内存c. find the page in backing store所需页在外存，找到该页d. find a free frame, schedule a disk operation to read the desired page into memory 找到一个空闲物理块，启动磁盘,把该页读入内存e. modify the page table after the disk read is complete读磁盘结束后,修改页表以指出该页已在内存中f. restart the instruction that interrupted 重新开始执行刚才发生缺页中断的指令,这时它可以访问刚才调入的页 Page Replacement页面置换：找到内存中并没有真正使用的一些页，换出 Page-Replacement Algorithms页面置换算法 Allocation of Frames页帧分配Each process needs minimum number of pages（每个进程所需要的最少的页的数目） major allocation schemes（主要的分配策略）.a. equal allocation（平均分配）b. Proportional allocation（按比例分配）c. priority allocation（优先分配） 固定分配 可变分配抖动 颠簸Thrashing:刚被换出的页很快又被访问，需重新调入，导致系统频繁地交换页面，以致大部分CPU时间花费在完成页面置换的工作上。 Working set工作集 基本思想：a. 根据程序的局部性原理，进程在一段时间内总是集中访问一些页面(活跃页面).b. 如果分配给一个进程的物理块数太少了，使该进程的活跃页面不能全部装入内存，则进程在运行过程中将频繁发生缺页c. 如果能为进程提供与活跃页面数相等的物理块数，则可减少缺页中断次数 working-set window a fixed number of page references 工作集窗口（Δ）是指对于给定的访问序列选取定长的区间，落在工作集窗口中的页面集合称为工作集正确选择工作集窗口（Δ）的大小，对存储器的有效利用和系统吞吐量的提高，都将产生重要的影响。 工作集理论可用于预调页，用于防止颠簸，但不够灵活一种更加直接的防止颠簸的方法是控制缺页频率（ Page-Fault Frequency ）：颠簸具有较高的缺页率，所以通过控制缺页频率，可以有效地防止颠簸的发生。 Page size selection（页面尺寸选择）a) Fragmentation（碎片）页面大，则内碎片大b) table size （表大小）页面小，则页表占用的空间大c) I/O overhead（I/O开销）磁盘I/O时间中传输时间和数据量有关系，但它占的比例很小，而寻道时间和旋转延迟时间占了很大的比例。所以页面尺寸比较大会有利于减少磁盘I/O时间。d) 减少I/O及内存的占用：要求页面尺寸小 ，采用小页，总的I/O就会降低，因为小页能够更精确的匹配局部e) 减少缺页率：要求页面尺寸大f) 总的趋势：页面尺寸越来越大，这是由于CPU速度和内存容量的增长超过了磁盘速度的加快 ppt10章 101页例题无敌 File System文件：具有文件名的一组相关信息的集合。 文件系统：OS中与文件管理有关的那部分软件及被它们管理的文件和文件属性的集合。 使用：用户通过文件系统提供的系统调用来实施对文件的操作：建、删除、写、读、打开、关闭等 文件的逻辑结构：顺序，索引，索引顺序物理结构：连续，链接，索引 文件的管理 : 用户按逻辑结构使用文件，文件系统按物理结构管理文件。因此，当用户请求读写文件时，文件系统必须实现文件的逻辑结构与物理结构之间的转换。 连续分配: 每一个文件占用一个连续的磁盘块的集合a) 优点：简单、顺序访问速度快、支持随机存取b) 缺点：外碎片、空间利用率低、不利于文件的动态增长（需事先知道文件的长度） 链接分配（离散分配方式）a) 隐式链接：指针。外碎片、允许作业动态增长；可靠性差、只适于顺序访问, 更多的寻道次数和寻道时间b) 显式链接（文件分配表FAT）：不支持高效的随机存取，FAT表占用空间 索引分配（离散分配方式）a) 每个文件建立一张索引表，指出分配给该文件的所有物理块号b) 支持高效随机存取、消除了外碎片、允许文件动态增长；但索引表占用较多空间 混合索引分配方式（UNIX采用）a) i 结点中设13个地址项：直接地址（0-9） 、一次间址（10）、二次间址（11）、三次间址（12） File Directory文件目录：一个包含着所有文件信息的节点的集合，目录结构和文件都磁盘上。文件控制块的有序集合 文件控制块FCBa) 用于描述和控制文件的数据结构，它至少要包括文件名和存放文件的盘物理地址b) 文件控制块的有序集合称为文件目录，即一个文件控制块FCB就是一个文件目录项。 Two-Level Directory两级目录a) 一级称为主文件目录（MFD），给出用户名，用户子目录所在的物理位置；b) 二级称为用户文件目录（UFD，又称用户子目录），给出该用户所有文件的FCB 树形目录：结构清晰方便管理保护，方便分了，提高检索速度，解决重名问题，查找逐层多次访盘影响速度 Acyclic-Graph Directories（无环图结构目录）：有共享的子目录和文件 文件别名实现：a) 索引节点 硬链接：目录内容分为两部分：文件名和索引结点。前者包括文件名和索引结点编号，后者包括文件的其他内容（包括属主和访问权限）。通过多个文件名链接(link)到同一个索引结点，别名的数目记录在索引借点的链接计数中，减少到0则文件删除。b) 符号链接(symbolic link, shortcut)：特殊类型的文件，其内容是到另一个目录或文件路径的链接。建立符号链接文件，并不影响原文件，实际上它们各是一个文件。可以建立任意的别名关系，甚至原文件是在其他计算机上。 Free-Space Management 空闲空间管理a) 位图法：一串二进制位反映磁盘空间中分配使用情况, 每个物理块对应一位, 分配物理块为0，否则为1。 申请物理块时，可以在位示图中查找为1的位，返回对应物理块号； 归还时；将对应位置1。b) 空闲块表 ：所有空闲块记录在一个表中，即空闲块表，有两项：该空闲区的第一个盘块号、该区的空闲盘块总数c) 空闲块链表：所有空闲块链成一个链. 扩展：成组链接法d) 成组链接法：将一个文件卷的所有空闲盘块按固定大小（如每组100块）分成若干组，并将每组的盘块数和该组所有盘块号记入前一组的最后一个备用块内，第一组的盘块数（可小于100）和该组所有的盘块号记入超级块的空闲盘块号栈中。 文件系统性能的改善：为提高对文件的访问速度，可从三个层次上着手：a) 改进文件的目录结构以及检索目录的方法，来减少对文件的查找时间；b) 选择好的文件存储结构，以提高对文件的访问速度；c) 提高磁盘I/O速度，以提高对数据的传送速度。 IO System IO系统的目标：提高设备的利用率a) 尽量提高CPU与I/O设备之间的并行工作程度b) 主要技术：中断技术、DMA技术、通道技术、缓冲技术 I/O系统的组成：设备控制器 I/O通道 总线 I/O通道：通道是独立于CPU的专门负责数据I/O传输工作的处理机，对外部设备实现统一管理，代替CPU对I/O操作进行控制，从而使I/O操作可与CPU并行操作。 通道可以执行通道程序。把CPU从繁杂的I/O任务中解脱出来，提高CPU与设备，设备与设备之间的并行工作能力 I/O控制方式a) 程序I/O方式(轮询Polling)：准备好了0没有1 串行工作b) 中断驱动I/O：i. CPU向设备控制器发出一条I/O命令后，立即返回继续执行原来的任务。ii. 设备控制器便控制I/O设备进行I/O。iii. 当设备完成了一个字节数据的I/O时，设备控制器产生一个中断信号。iv. CPU检测到中断信号后，进行相应的处理工作。c) 直接存储器访问（Direct Memory Access）DMA控制方式：DMA方式较之中断驱动方式，成百倍地减少了CPU对I/O的干预，进一步提高了CPU与I/O设备的并行操作程度。d) I/O通道控制方式：进一步减少CPU的干预，即把对一个数据块的I/O为单位的干预，减少到以对一组数据块的I/O及有关的控制和管理为单位的干预。 缓冲技术：为提高I/O速度和设备的利用率，几乎所有的I/O设备在与处理机（内存）交换数据时，都使用了缓冲区。引入缓冲的主要原因有以下三点：a) 缓和CPU与I/O设备间速度不匹配的矛盾b) 减少对CPU的中断频率，放宽对中断响应时间的限制c) 提高CPU和I/O设备之间的并行性 OS提供以下几种缓冲形式：a) 单缓冲b) 双缓冲c) 循环缓冲d) 缓冲池：i. 空（闲）缓冲区；ii. 输入缓冲区:装满输入数据；iii. 输出缓冲区:装满输出数据 I/O软件组织成以下4个层次：a) (1)用户空间的I/O软件：与用户程序连接在一起的库过程构成，它们运行在OS内核之外。系统调用，包括I/O系统调用，通常由库过程实现b) (2)与设备无关的I/O软件(设备独立软件)i. 设备命名ii. 设备保护iii. 设备分配iv. 用户使用方法：申请分配 使用 释放c) (3)设备驱动程序：操作系统能够以统一的方式对待不同的I/O设备，因为具体的差别被称为设备驱动程序 的内核模块所封装d) (4)中断处理程序：i. 在 I/O 时，设备控制器如果准备好服务会向CPU发出一中断请求。ii. 这些中断表示输入数据已有，或输出已完成，或已检测到错误。iii. CPU响应后便转向中断处理程序 Secondary Storage SPOOLing技术 什么是SPOOLing：a) 利用多道程序中的一道程序来模拟脱机输入时的外围控制机的功能，把低速I/O设备上的数据传送到高速磁盘上；b) 用另一道程序来模拟脱机输出时外围控制机的功能，把数据从磁盘传送到低速输出设备上c) 这样，便在主机的直接控制下，实现脱机输入、输出功能。d) 此时的外围操作与CPU对数据的处理同时进行，这种在联机情况下实现的同时外围操作称为SPOOLing (Simultaneous Peripheral Operations On-Line)，或称假脱机操作。 SPOOLing的组成：SPOOLing系统是对脱机输入、输出工作的模拟，它必须有高速随机外存的支持，这通常是采用磁盘。 SPOOLing系统的特点a) 提高了I/O速度b) 将独占设备改造为共享设备c) 实现了虚拟设备功能","link":"/2018/12/13/Operating System/summary/"}],"tags":[],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Computer Organization & Architecture","slug":"Computer-Organization-Architecture","link":"/categories/Computer-Organization-Architecture/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Class Notes","slug":"Linux/Class-Notes","link":"/categories/Linux/Class-Notes/"},{"name":"Software Quality Assurance","slug":"Software-Quality-Assurance","link":"/categories/Software-Quality-Assurance/"},{"name":"Individual techniques","slug":"Software-Quality-Assurance/Individual-techniques","link":"/categories/Software-Quality-Assurance/Individual-techniques/"},{"name":"Class Notes","slug":"Software-Quality-Assurance/Class-Notes","link":"/categories/Software-Quality-Assurance/Class-Notes/"},{"name":"Operating System","slug":"Operating-System","link":"/categories/Operating-System/"}]}