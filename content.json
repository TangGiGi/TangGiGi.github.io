{"pages":[],"posts":[{"title":"Android案例-弹出菜单","text":"MainActivity.java123456789public void OnMenu(View view){ // 获取自定义的菜单布局文件 View popupWindow_view = getLayoutInflater().inflate(R.layout.menu, null,false); // 创建PopupWindow实例,设置菜单宽度和高度为包裹其自身内容 popupWindow = new PopupWindow(popupWindow_view, ActionBar.LayoutParams.WRAP_CONTENT, ActionBar.LayoutParams.WRAP_CONTENT, true); //设置菜单显示在按钮的下面 popupWindow.showAsDropDown(findViewById(R.id.btn_menu),0,0); // 点击其他地方消失 menu.xml为弹出菜单 文档 public class PopupWindow extends Objectjava.lang.Object ↳ android.widget.PopupWindow 该类表示可用于显示任意视图的弹出窗口。弹出窗口是出现在当前活动顶部的浮动容器。This class represents a popup window that can be used to display an arbitrary view. The popup window is a floating container that appears on top of the current activity. Public constructors1234public PopupWindow (View contentView, int width, int height, boolean focusable) Create a new popup window which can display the contentView. The dimension of the window must be passed to this constructor.The popup does not provide any background. This should be handled by the content view. contentView:the popup’s contentwidth :the popup’s widthheight :the popup’s heightfocusable :true if the popup can be focused, false otherwise Public methods1234public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Parametersanchor:the view on which to pin the popup windowxoff:A horizontal offset from the anchor in pixelsyoff:A vertical offset from the anchor in pixelsgravity: Alignment of the popup relative to the anchor 12345678View inflate(int resource, ViewGroup root)//Inflate a new view hierarchy from the specified xml resource.View inflate(XmlPullParser parser, ViewGroup root)//Inflate a new view hierarchy from the specified xml node.View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot)//Inflate a new view hierarchy from the specified XML node.View inflate(int resource, ViewGroup root, boolean attachToRoot)//Inflate a new view hierarchy from the specified xml resource.","link":"/2018/11/04/Android/Android案例-弹出菜单/"},{"title":"Linux用户用户组和文件权限","text":"","link":"/2018/12/07/Linux/Linux用户用户组和文件权限/"},{"title":"Vi常见命令","text":"","link":"/2018/12/07/Linux/Vi常见命令/"},{"title":"Linux简介","text":"manman （/usr/share/man）如果输入命令 man 后英语手册页没有自动显示，则您可以使用参数LANG=en_EN来显示英语版本的手册页。1&gt; LANG=en_EN man man 给出关于man的具体描述，包括以下几个部分其中每个手册页标题的左右侧是命令名和手册页所属的章节号。标题的中间是章节的名称。 12345678910NAME 命令的名称和简短描述SYNOPSIS 语法的描述DESCRIPTION 命令的详细描述OPTIONS 提供的所有可用选项的描述COMMANDS 在程序运行时可以分配给该程序的说明FILES 使用某种方法连接到命令的文件SEE ALSO 相关命令的提示DIAGNOSTICS 程序可能出现的错误消息EXAMPLE 调用命令的示例BUGS 命令的已知错误和问题 手册页可以分为以下不同的小节 123456781 可执行程序和 shell 命令（用户命令）2 系统调用3 功能和库例程4 设备文件5 配置文件和文件格式6 游戏7 宏软件包和文件格式8 系统管理命令 例如12&gt;man 1 crontab&gt;man 5 crontab 使用命令 whatis 显示某个命令或实用程序的所有可用手册页的简短描述1&gt;whatis crontab Info/usr/share/info/Info工具是一个基于菜单的超文本系统，由GNU项目开发并由Linux发布。info工具包括一些关于Linux shell、工具、GNU项目开发程序的说明文档。与man相比，info工具可显示更完整的最新的GNU工具信息1&gt;info ls –help“–help”是一个工具选项1&gt;ls --help Howto文档/usr/share/doc/howtoor http://www.tldp.org/index.html 在线文档一些在线信息http://www.tldp.orghttp://www.linux.orghttp://www.redhat.comhttp://www.suse.comhttp://www.xfree86.orghttp://www.linuxplanet.comhttp://www.cert.orghttp://www.securityfocus.comhttp://www.kernel.orghttp://man.linuxde.net/ 在以下目录中提供了大多数已安装软件包包的帮助文件：/usr/share/doc/packages/package-name ls -l 查看文件的属性普通文件 -rw-r–r–目录文件 drwxr-xr-x字符设备文件 crw-rw-rw-块设备文件 brw-r—–套接字文件 srwxrwxrwx链接文件 lrwxrwxr—FIFO文件 prwxr—r–","link":"/2018/12/07/Linux/linux简介/"},{"title":"学用linux","text":"文件查找 findfind 在命令行上搜索文件1&gt;find path criterion action path：要搜索的文件系统部分（指定的目录及其所有子目录）。如果什么也没指定，则将使用当前目录下的文件系统。criterion：文件应该具有的属性：-name pattern 搜索名称中包含给定模式的文件。如果模式中包含元字符或通配符，则必须用引号将它括起。否则，它将由 shell 解释，而不是由 find 解释。-type file_type 搜索文件类型。适用的文件类型如下：“d”（用于目录）、“f”（用于文件）或者“l”（用于符号链接）。-ctime [+/-]days 搜索恰好在指定的几天前进行上一次修改的那些文件。action:影响以下条件或将搜索作为一个整体进行控制的选项，例如： -print -exec command 可使用选项 -exec 调用其他命令 例子 1&gt;find ~ -name kk* -type f –exec grep first {} \\; -print {} 这两个括号代表找到的并传递到命令 grep 的文件名的占位符。分号用于结束 -exec指令。由于它是特殊字符，所以在它前面放一个反斜杠，以此来标记它。 locate locate 是 find -name 的替代命令（必须装有软件包 findutils-locate）。首次使用要用updatedb生成/更新数据库。 查找命令所在目录whereis 命令 whereis 将返回二进制（选项 -b）、手册页（选项 -m）和指定命令的源代码（选项 -s）。该命令的速度比 find 快，但不如 find 全面。 123&gt;whereis -b ls&gt;whereis -m ls&gt;whereis -s ls which which 将搜索在变量 PATH 中为指定命令列出的所有路径，并返回该命令的完整路径。命令 which 特别适用于以下情况：不同目录中存在某个命令的几个版本，并且您想知道在未指定路径的情况下输入时将执行哪个版本。 1&gt;which find type命令 type command 可用来查找在输入 command 时执行哪类命令，是 shell 内置命令还是外部命令。选项 -a 在文件系统中传递采用该名称的命令的所有实例。12&gt;type type&gt;type grep 搜索文件内容 grep当需要查找包含特殊词、短语或项的所有文件，并且是扫描所有文件而不在编辑器中打开它们时&gt;grep search_pattern filename该命令将在文件名中进行搜索以寻找与 search_pattern 匹配的所有文本，并打印包含该模式的行。123456命令 grep 的可用选项如下： -i 忽略大小写。 -l 仅显示包含搜索字符串的文件的名称。 -r 递归地搜索整个目录树。 -v 给定不包含搜索字符串的所有行。 -n 显示行号。 1234&gt;grep test d* //显示所有以d开头的文件中包含test的行&gt;grep -n test aa bb cc//显示在aa，bb，cc文件中匹配test的行。 安装RPM包用rpm安装软件的命令格式如下： rpm -i [安装选项] rpm 软件包名 安装选项有很多，常用的如下： -vh ：显示安装过程中的详细信息； –percent：显示安装进度的百分比； –test：不进行安装软件包，只进行安装测试并显示简单的报告； –force：忽略任何错误，强制安装软件包。 更新、卸载RPM包 rpm -u rpm软件包名 rpm -e rpm软件包名 查询已安装的包版本rpm –qa |grep 软件包名","link":"/2018/12/07/Linux/学用linux/"},{"title":"2-Software Quality","text":"Objectives Introduce software quality Provide stakeholder-centric visions of quality and defect Identify software quality assurance Define quality Fitness for use –Dr. Joseph M. Juran The totality of features and characteristics of a product that bear on its ability to satisfy a given need –American Society for Quality Conformance with requirements –Philip Crosby conforms to specifications Quality is value to some person.– Gerald M. Weinberg key dimensions of quality Customer Satisfiers the right features adequate instruction Customer Dissatisfiers unreliable hard to use too slow incompatible with the customer’s equipment Dimensions of Quality: FURPS Functionality Test the accurate workings of each usage scenario Usability Test application from the perspective of convenience to end-user. Reliability Test the application behaves consistently and predictably. Performance Test online response under average and peak loading Supportability Test the ability to maintain and support application under production use A Broader Definition of Dimensions of Quality Accessibility Capability Compatibility Concurrency Conformance to standards Efficiency Installability and uninstallability Localizability Maintainability Performance Portability Reliability Scalability Security Supportability Testability Usability…… Definition of SQA Software quality assurance (SQA) is:A systematic, planned set of actions necessary to provide adequate confidence that the software development process or the maintenance process of a software system product conforms to established functional and technical requirements as well as with the managerial requirements of keeping the schedule and operating within the budgetary confines. 系统的，有计划的一系列行动，以充分确信软件开发过程或软件系统产品的维护过程符合既定的功能和技术要求，以及在预算范围内保持计划和操作的管理要求。 SQA system component classes Pre-project quality components Project life cycle quality components Infrastructure error preventive and improvement components Software quality management components Standardization, certification and SQA assessment components Organizing for SQA – the human components","link":"/2018/12/08/Software Quality Assurance/Class Notes/2-Software Quality/"},{"title":"3-Introduction to Software Testing","text":"Objectives Introduce foundation topics of software testing Explain test ideas Introduce test matrices Definition of Software Testing Software testing is a process, or a series of processes, designed to make sure computer code does what it was designed to do and that it does not do anything unintended. Software should be predictable and consistent, presenting no surprises to users. Testing is the process of executing a program with the intent of finding errors. Software testing objectives 在测试软件中识别和揭示尽可能多的错误 在将已识别的错误和重新测试校正后，将测试的软件带到可接受的质量水平。 在预算和调度限制内有效地执行所需的测试。 编译软件错误记录以用于错误预防（通过纠正和预防措施）。 Test model Classification of software testing Vital Program Testing Guidelines Functional Testing 是黑盒测试 对性能以外的任何外部可见或可测量的软件属性感兴趣。 Test Ideas A test idea is a brief statement that identifies a test that might be useful. A test idea differs from a test case, in that the test idea contains no specification of thetest workings, only the essence of the idea behind the test. Test ideas are generators for test cases: potential test cases are derived from a test ideas list. A key question for the tester or test analyst is which ones are the ones worth trying. Where Do Test Ideas Come From? Models Specifications Customer complaints Brainstorm sessions among colleagues Bug lists Representative exemplars","link":"/2018/12/08/Software Quality Assurance/Class Notes/3-Introduction to Software Testing/"},{"title":"1-Software Engineering Practices","text":"Some things Testers should know about them Objectives Identify some common software development problems. Identify six software engineering practices for addressing common software development problems 常见的软件开发问题症状 User or business needs not met Requirements churn Modules don’t integrate Hard to maintain Late discovery of flaws Poor quality or poor user experience Poor performance under load No coordinated team effort Build-and-release issues 六种软件工程实践Develop IterativelyManage RequirementsUse Component ArchitecturesModel Visually (UML)Continuously Verify QualityManage Change Develop Iteratively 瀑布模型特点 Delays confirmation of critical risk resolution Measures progress by assessing work-products that are poor predictors of time-to-completion Delays and aggregates integration and testing Precludes early deployment Frequently results in major unplanned project extensions 迭代模型特点 最早的迭代可以解决最大的风险.每次迭代都会生成可执行版本. 每次迭代都包括集成和测试。迭代有助于: 在进行大量投资之前解决重大风险 实现早期客观反馈 使测试和集成持续进行 将项目重点放在可实现的短期目标里程碑上 可以部署完成的最终系统的部分实现 Manage Requirements 为了帮助管理需求与从这些需求派生的测试之间的关系，您可以在这些元素之间建立可跟踪性关系.可追溯性有助于我们做很多事情，包括： 评估项目对需求变更的影响 评估测试失败对需求的影响（如果测试失败，可能不满足要求） 验证应用程序是否仅执行预期的操作 验证实施是否满足系统的所有要求 管理项目范围 管理变更 Component-Based Architecture 弹性 满足当前和未来的要求 提高可扩展性 允许重用 封装系统依赖性 基于组件 重用或自定义组件 从市售组件中选择 逐步发展现有软件 Model Visually (UML)详情见软件分析与设计课程总结 Continuously Verify Quality详情见软件分析与设计课程总结 Manage Change Changes to enable iterative development Secure workspaces for each worker Parallel development possible Automated integration/build management","link":"/2018/12/08/Software Quality Assurance/Class Notes/1-Software Engineering Practices/"},{"title":"4-The RUP Test Discipline","text":"Objectives The terminology of RUP The testing discipline in RUP The testing workflow structure WHAT The Rational Unified Process (RUP) is a software engineering process framework that provides a disciplined yet flexible approach to assigning tasks and responsibilities within a software development organization. RUP’s goal is to support the production of high-quality software that meets the needs of its end users within a predictable schedule and budget. The RUP supports many software engineering practices The dynamic structure (phases and iterations) of the Rational Unified Process creates a basis for iterative development. The Project Management discipline describes how to set up and execute a project using phases and iterations. The Use-Case Model and Risk List of the Requirements discipline help determine what functionality you implement in each iteration. The Workflow Details of the Requirements discipline show the activities and artifacts that make requirements management possible. The iterative approach allows you to progressively identify components, decide which ones to develop, which ones to reuse, and which ones to buy. The Unified Modeling Language (UML) used in the process represents the basis of Visual Modeling and has become the de facto modeling language standard. The focus on software architecture allows you to articulate the structure: the components and the ways in which they integrate, the fundamental mechanisms and patterns by which they interact The Rational Unified Process has four phases: Inception - Define the project scope, gain agreement on project objectives, baseline the product Vision Elaboration - Address key technical risks, produce an evolutionary prototype, baseline the Architecture Construction - Iteratively and incrementally develop an operationally complete product Transition - Deliver the product into the live end-user environment 初始 - 定义项目范围，就项目目标达成一致，为产品愿景奠定基础 精化 - 解决关键技术风险，制作演化原型，建立基线 构建 - 迭代并逐步开发出操作完整的产品 过渡 - 将产品交付给实时最终用户环境 Roles in the Test Discipline Test Manager is tasked with the overall responsibility for the test effort’s success. Test Analyst is responsible for initially identifying and defining the required tests, and subsequently evaluating the results of the test effort. Test Designer is responsible for defining the test approach and ensuring its successful implementation. Tester is responsible for the core activities of the test effort, which involves conducting the necessary tests and logging the outcomes of that testing. Define Evaluation Mission Identify the appropriate focus of the test effort for the iteration. Gain agreement with stakeholders on the corresponding goals that will direct the test effort. Test and Evaluate Achieve appropriate breadth and depth of testing to enable a sufficient evaluation of the targeted test items. Achieve Acceptable Mission Deliver a useful evaluation result to the stakeholders of the test effort. Actively prioritize the test work that remains to be conducted. Verify Test Approach Demonstrate the techniques outlined in the Test Approach will support the required testing. Verify that the approach will work, produce accurate results and is appropriate for the available resources. Validate Build Stability Validate that the build is stable enough for detailed test and evaluation work to begin Improve Test Assets Maintain and improve the evolving test assets. (e.g. Maintain test suites and test data; harvest test-ideas into catalogs; clarify change request details)","link":"/2018/12/08/Software Quality Assurance/Class Notes/4-The RUP Test Discipline/"},{"title":"5-Define Evaluation Mission","text":"Content Define Evaluation Mission Defining the mission of the test group Defining the goal for test documentation In this module, we begin with the workflow detail Define Evaluation Mission The Mission focuses on the high-level objectives of the test team for the current iteration Define Evaluation Mission The purpose of this workflow detail is to: 确定迭代测试工作的适当重点。 与利益相关方就实现测试工作的相应目标达成协议 对于每次迭代，工作主要集中在： 确定测试工作的目标和可交付成果 确定良好的资源利用战略 为测试工作定义适当的范围和边界 概述将使用的方法 确定如何监控和评估进展情况。 Defining the Test Approach The test approach (testing strategy)specifies the techniques that will be used to accomplish the test mission. The test approach also specifies how the techniques will be used. A good test approach is: Diversified Include a variety of techniques. Each technique is tailored to expose certain types of problems, and is virtually blind to others. Combining them allows you to find problems that would be hard to find if you spent the same resource on a narrower collection of techniques. Risk-focused Tests give you the opportunity to find defects or attributes of the software that will disappoint, alienate, or harm a stakeholder. You can’t run all possible tests. To be efficient, you should think about the types of problems that are plausibly in this product or that would make a difference if they were in this product, and make sure that you test for them. Product-specific Generic test approaches don’t work. Your needs and resources will vary across products. The risks vary across products. Therefore the balance of investment in different techniques should vary across products. Practical here’s no point defining an approach that is beyond your project’s capabilities (including time, budget, equipment, and staff skills). Defensible Defining the goal for test documentation What Test Documentation Should You Use? Test planning standards and templates Requirements considerations Questions to elicit information about test documentation requirements for your project IEEE Standard 829 for Software Test Documentation","link":"/2018/12/08/Software Quality Assurance/Class Notes/5-Define Evaluation Mission/"},{"title":"6-Test & Evaluate","text":"Content Defining test techniques Individual techniques Using techniques together Dimensions of Test Techniques Think of the testing you do in terms of five dimensions: Testers: who does the testing. Coverage: what gets tested. Potential problems: why you’re testing (what risk you’re testing for). Activities: how you test. Evaluation: how to tell whether the test passed or failed. Of the 200+ published Functional Testing techniques, there are ten basic themes.They capture the techniques in actual practice. Function testing Equivalence analysis Specification-based testing Risk-based testing Stress testing Regression testing Exploratory testing User testing Scenario testing Stochastic or Random testing详情见 Individual techniques 目录","link":"/2018/12/08/Software Quality Assurance/Class Notes/6-Test & Evaluate/"},{"title":"6-Test & Evaluate","text":"","link":"/2018/12/10/Software Quality Assurance/Individual techniques/Function testing/"}],"tags":[],"categories":[{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Software Quality Assurance","slug":"Software-Quality-Assurance","link":"/categories/Software-Quality-Assurance/"},{"name":"Class Notes","slug":"Software-Quality-Assurance/Class-Notes","link":"/categories/Software-Quality-Assurance/Class-Notes/"}]}